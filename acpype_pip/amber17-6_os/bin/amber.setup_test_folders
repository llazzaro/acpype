#!/opt/anaconda1anaconda2anaconda3/bin/python

# Used for binary distribution testing
# Basically we will create symlink for amberhome/test and amberhome/AmberTools/test folders (from source code)
# in our binary folder

# This script must be in $AMBERHOME/bin folder
import os
import sys
import argparse
from contextlib import contextmanager
import subprocess

config_h_template = """
INSTALLTYPE=serial
AMBER_SOURCE={amber_source}
AMBER_PREFIX={amber_prefix}
BINDIR={amber_prefix}/bin
DATDIR={amber_prefix}/dat
LIBDIR={amber_prefix}/lib
INCDIR={amber_prefix}/include
PYTHON=python
SHARED_SUFFIX={shared_suffix}
"""


def sh(command):
    subprocess.check_call(command, shell=True)


@contextmanager
def change_folder(where):
    here = os.getcwd()
    os.chdir(where)
    yield
    os.chdir(here)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'amber_source',
        help='path to amber root source code (similiar to AMBERHOME)')
    parser.add_argument(
        '--skip-checking',
        action='store_true',
        help=
        'do not check if existing AmberTools. Good for testing if this script is not in $AMBERHOME/bin'
    )
    opt = parser.parse_args()

    amber_source = os.path.abspath(opt.amber_source)
    amber_prefix = os.path.abspath(os.path.dirname(__file__) + '/../')

    if sys.platform.startswith('darwin'):
        shared_suffix = '.dylib'
    else:
        shared_suffix = '.so'
    print(shared_suffix)

    with change_folder(amber_prefix):
        if not opt.skip_checking:
            if not os.path.exists(amber_prefix + '/bin'):
                raise OSError(
                    "Not found bin folder in {}".format(amber_prefix))
        for test_folder in ['AmberTools/test', 'test']:
            if not os.path.exists(amber_prefix + '/' + test_folder):
                sh("mkdir -p {}".format(test_folder))
            with change_folder(test_folder):
                sh("lndir {}".format(amber_source + '/' + test_folder))
        with open('config.h', 'w') as fh:
            fh.write(
                config_h_template.format(
                    amber_source=amber_source,
                    shared_suffix=shared_suffix,
                    amber_prefix=amber_prefix))

        ambertools_src = 'AmberTools/src'
        if not os.path.exists(ambertools_src):
            sh("mkdir -p {}".format(ambertools_src))

        # Makefile
        sh("cp {}/Makefile .".format(amber_source))
        sh("cp config.h AmberTools/src/")


if __name__ == '__main__':
    main()
